"""PhysBryk.

Methods and services to control the hardware of the PhysBryk system.

Hardware:
   Adafruit Feather nRF52840 Sense: https://learn.adafruit.com/adafruit-feather-sense/overview
   Adafruit INA260 breakout: https://learn.adafruit.com/adafruit-ina260-current-voltage-power-sensor-breakout
    
Base uuid for PhysBryk is a0d1nnnn-0eaa-5b52-bc84-818888dc7dc5
Generated by physbryk_uuid.baseUUID('https://github.com/Geoffysicist/PhysBrykPy')
"""

__version__ = "0.0.1"
__repo__ = "https://github.com/Geoffysicist/PhysBrykPy"


from adafruit_ble import BLERadio
from physbryk import PhysBrykServerAdvertisement
from physbryk import CoreService
from physbryk import DummySensor

import board
import analogio
import time
import adafruit_lsm6ds.lsm6ds33 # motion
import adafruit_lis3mdl # magnetometer
import adafruit_apds9960.apds9960 # light

    

core_service = CoreService()
last_update = 0

ble = BLERadio()
i2c = board.I2C()

# dummy_sensor = DummySensor()
battery = analogio.AnalogIn(board.VOLTAGE_MONITOR)
motion = adafruit_lsm6ds.lsm6ds33.LSM6DS33(i2c)
magnetometer = adafruit_lis3mdl.LIS3MDL(i2c)
light = adafruit_apds9960.apds9960.APDS9960(i2c)
light.enable_color = True
adv = PhysBrykServerAdvertisement()
adv.complete_name = "PhysBrykAlpha"

while True:
    # Advertise when not connected.
    print('advertising...')
    ble.start_advertising(adv)
    while not ble.connected:
        pass
    ble.stop_advertising()

    while ble.connected:
        # now_msecs = time.monotonic_ns() // 1000000  # pylint: disable=no-member

        # if now_msecs - last_update >= core_service.measurement_period:
            # print(battery.value)
        core_service.battery = battery.value
        core_service.acceleration = motion.acceleration # m/s/s
        core_service.gyro = motion.gyro # rad/s
        core_service.magnetic = magnetometer.magnetic # uT
        core_service.spectrum = light.color_data
        # dummy_svc.value = dummy_sensor.value
        # dummy_sensor.update()
        # last_update = now_msecs


print('done')